"""
Vulnerability model for Vulnhound
"""
from dataclasses import dataclass, field
from pathlib import Path
from typing import List, Dict, Any, Optional
from enum import Enum


class VulnerabilityType(Enum):
    """Types of security vulnerabilities"""
    SQL_INJECTION = "SQL Injection"
    XSS = "Cross-Site Scripting"
    COMMAND_INJECTION = "Command Injection"
    PATH_TRAVERSAL = "Path Traversal"
    INSECURE_DESERIALIZATION = "Insecure Deserialization"
    INSECURE_DIRECT_OBJECT_REFERENCE = "Insecure Direct Object Reference"
    BROKEN_AUTHENTICATION = "Broken Authentication"
    SENSITIVE_DATA_EXPOSURE = "Sensitive Data Exposure"
    XML_EXTERNAL_ENTITY = "XML External Entity"
    SECURITY_MISCONFIGURATION = "Security Misconfiguration"
    CSRF = "Cross-Site Request Forgery"
    USING_COMPONENTS_WITH_VULNERABILITIES = "Using Components with Known Vulnerabilities"
    UNVALIDATED_REDIRECTS = "Unvalidated Redirects and Forwards"
    SERVER_SIDE_REQUEST_FORGERY = "Server-Side Request Forgery"
    BUSINESS_LOGIC_VULNERABILITY = "Business Logic Vulnerability"
    API_SECURITY = "API Security Issue"
    HARDCODED_CREDENTIALS = "Hardcoded Credentials"
    INSUFFICIENT_LOGGING = "Insufficient Logging & Monitoring"
    OTHER = "Other Vulnerability"


class SeverityLevel(Enum):
    """Severity levels for vulnerabilities"""
    CRITICAL = "Critical"
    HIGH = "High"
    MEDIUM = "Medium"
    LOW = "Low"
    INFO = "Informational"


@dataclass
class CodeLocation:
    """Represents a location in code"""
    file_path: Path
    line_number: int
    column: int = 0
    end_line: Optional[int] = None
    end_column: Optional[int] = None
    code_snippet: str = ""


@dataclass
class Vulnerability:
    """
    Represents a security vulnerability found in code
    """
    vulnerability_type: VulnerabilityType
    location: CodeLocation
    description: str
    severity: SeverityLevel
    confidence: float  # 0.0 to 1.0
    detector_type: str  # "pattern", "ai", or "hybrid"
    detection_rule: Optional[str] = None
    recommendation: Optional[str] = None
    cwe_id: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert vulnerability to dictionary for serialization"""
        return {
            "type": self.vulnerability_type.value,
            "file_path": str(self.location.file_path),
            "line_number": self.location.line_number,
            "code_snippet": self.location.code_snippet,
            "description": self.description,
            "severity": self.severity.value,
            "confidence": self.confidence,
            "detector_type": self.detector_type,
            "recommendation": self.recommendation,
            "cwe_id": self.cwe_id,
            "metadata": self.metadata
        }
